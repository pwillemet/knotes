# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
    query: query_root
    mutation: mutation_root
    subscription: subscription_root
}

"whether this query should be cached (Hasura Cloud only)"
directive @cached(
    "refresh the cache entry"
    refresh: Boolean! = false,
    "measured in seconds"
    ttl: Int! = 60
) on QUERY

"columns and relationships of \"knotes.note\""
type knotes_note {
    content: String!
    created_at: timestamptz
    id: Int!
    title: String!
    updated_at: timestamptz
}

"aggregated selection of \"knotes.note\""
type knotes_note_aggregate {
    aggregate: knotes_note_aggregate_fields
    nodes: [knotes_note!]!
}

"aggregate fields of \"knotes.note\""
type knotes_note_aggregate_fields {
    avg: knotes_note_avg_fields
    count(columns: [knotes_note_select_column!], distinct: Boolean): Int!
    max: knotes_note_max_fields
    min: knotes_note_min_fields
    stddev: knotes_note_stddev_fields
    stddev_pop: knotes_note_stddev_pop_fields
    stddev_samp: knotes_note_stddev_samp_fields
    sum: knotes_note_sum_fields
    var_pop: knotes_note_var_pop_fields
    var_samp: knotes_note_var_samp_fields
    variance: knotes_note_variance_fields
}

"aggregate avg on columns"
type knotes_note_avg_fields {
    id: Float
}

"aggregate max on columns"
type knotes_note_max_fields {
    content: String
    created_at: timestamptz
    id: Int
    title: String
    updated_at: timestamptz
}

"aggregate min on columns"
type knotes_note_min_fields {
    content: String
    created_at: timestamptz
    id: Int
    title: String
    updated_at: timestamptz
}

"response of any mutation on the table \"knotes.note\""
type knotes_note_mutation_response {
    "number of rows affected by the mutation"
    affected_rows: Int!
    "data from the rows affected by the mutation"
    returning: [knotes_note!]!
}

"aggregate stddev on columns"
type knotes_note_stddev_fields {
    id: Float
}

"aggregate stddev_pop on columns"
type knotes_note_stddev_pop_fields {
    id: Float
}

"aggregate stddev_samp on columns"
type knotes_note_stddev_samp_fields {
    id: Float
}

"aggregate sum on columns"
type knotes_note_sum_fields {
    id: Int
}

"aggregate var_pop on columns"
type knotes_note_var_pop_fields {
    id: Float
}

"aggregate var_samp on columns"
type knotes_note_var_samp_fields {
    id: Float
}

"aggregate variance on columns"
type knotes_note_variance_fields {
    id: Float
}

"mutation root"
type mutation_root {
    "delete data from the table: \"knotes.note\""
    delete_knotes_note(
        "filter the rows which have to be deleted"
        where: knotes_note_bool_exp!
    ): knotes_note_mutation_response
    "delete single row from the table: \"knotes.note\""
    delete_knotes_note_by_pk(id: Int!): knotes_note
    "insert data into the table: \"knotes.note\""
    insert_knotes_note(
        "the rows to be inserted"
        objects: [knotes_note_insert_input!]!,
        "upsert condition"
        on_conflict: knotes_note_on_conflict
    ): knotes_note_mutation_response
    "insert a single row into the table: \"knotes.note\""
    insert_knotes_note_one(
        "the row to be inserted"
        object: knotes_note_insert_input!,
        "upsert condition"
        on_conflict: knotes_note_on_conflict
    ): knotes_note
    "update data of the table: \"knotes.note\""
    update_knotes_note(
        "increments the numeric columns with given value of the filtered values"
        _inc: knotes_note_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: knotes_note_set_input,
        "filter the rows which have to be updated"
        where: knotes_note_bool_exp!
    ): knotes_note_mutation_response
    "update single row of the table: \"knotes.note\""
    update_knotes_note_by_pk(
        "increments the numeric columns with given value of the filtered values"
        _inc: knotes_note_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: knotes_note_set_input,
        pk_columns: knotes_note_pk_columns_input!
    ): knotes_note
    "update multiples rows of table: \"knotes.note\""
    update_knotes_note_many(
        "updates to execute, in order"
        updates: [knotes_note_updates!]!
    ): [knotes_note_mutation_response]
}

type query_root {
    "fetch data from the table: \"knotes.note\""
    knotes_note(
        "distinct select on columns"
        distinct_on: [knotes_note_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [knotes_note_order_by!],
        "filter the rows returned"
        where: knotes_note_bool_exp
    ): [knotes_note!]!
    "fetch aggregated fields from the table: \"knotes.note\""
    knotes_note_aggregate(
        "distinct select on columns"
        distinct_on: [knotes_note_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [knotes_note_order_by!],
        "filter the rows returned"
        where: knotes_note_bool_exp
    ): knotes_note_aggregate!
    "fetch data from the table: \"knotes.note\" using primary key columns"
    knotes_note_by_pk(id: Int!): knotes_note
}

type subscription_root {
    "fetch data from the table: \"knotes.note\""
    knotes_note(
        "distinct select on columns"
        distinct_on: [knotes_note_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [knotes_note_order_by!],
        "filter the rows returned"
        where: knotes_note_bool_exp
    ): [knotes_note!]!
    "fetch aggregated fields from the table: \"knotes.note\""
    knotes_note_aggregate(
        "distinct select on columns"
        distinct_on: [knotes_note_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [knotes_note_order_by!],
        "filter the rows returned"
        where: knotes_note_bool_exp
    ): knotes_note_aggregate!
    "fetch data from the table: \"knotes.note\" using primary key columns"
    knotes_note_by_pk(id: Int!): knotes_note
    "fetch data from the table in a streaming manner: \"knotes.note\""
    knotes_note_stream(
        "maximum number of rows returned in a single batch"
        batch_size: Int!,
        "cursor to stream the results returned by the query"
        cursor: [knotes_note_stream_cursor_input]!,
        "filter the rows returned"
        where: knotes_note_bool_exp
    ): [knotes_note!]!
}

"ordering argument of a cursor"
enum cursor_ordering {
    "ascending ordering of the cursor"
    ASC
    "descending ordering of the cursor"
    DESC
}

"unique or primary key constraints on table \"knotes.note\""
enum knotes_note_constraint {
    "unique or primary key constraint on columns \"id\""
    note_pkey
}

"select columns of table \"knotes.note\""
enum knotes_note_select_column {
    "column name"
    content
    "column name"
    created_at
    "column name"
    id
    "column name"
    title
    "column name"
    updated_at
}

"update columns of table \"knotes.note\""
enum knotes_note_update_column {
    "column name"
    content
    "column name"
    created_at
    "column name"
    id
    "column name"
    title
    "column name"
    updated_at
}

"column ordering options"
enum order_by {
    "in ascending order, nulls last"
    asc
    "in ascending order, nulls first"
    asc_nulls_first
    "in ascending order, nulls last"
    asc_nulls_last
    "in descending order, nulls first"
    desc
    "in descending order, nulls first"
    desc_nulls_first
    "in descending order, nulls last"
    desc_nulls_last
}

scalar timestamptz

"Boolean expression to compare columns of type \"Int\". All fields are combined with logical 'AND'."
input Int_comparison_exp {
    _eq: Int
    _gt: Int
    _gte: Int
    _in: [Int!]
    _is_null: Boolean
    _lt: Int
    _lte: Int
    _neq: Int
    _nin: [Int!]
}

"Boolean expression to compare columns of type \"String\". All fields are combined with logical 'AND'."
input String_comparison_exp {
    _eq: String
    _gt: String
    _gte: String
    "does the column match the given case-insensitive pattern"
    _ilike: String
    _in: [String!]
    "does the column match the given POSIX regular expression, case insensitive"
    _iregex: String
    _is_null: Boolean
    "does the column match the given pattern"
    _like: String
    _lt: String
    _lte: String
    _neq: String
    "does the column NOT match the given case-insensitive pattern"
    _nilike: String
    _nin: [String!]
    "does the column NOT match the given POSIX regular expression, case insensitive"
    _niregex: String
    "does the column NOT match the given pattern"
    _nlike: String
    "does the column NOT match the given POSIX regular expression, case sensitive"
    _nregex: String
    "does the column NOT match the given SQL regular expression"
    _nsimilar: String
    "does the column match the given POSIX regular expression, case sensitive"
    _regex: String
    "does the column match the given SQL regular expression"
    _similar: String
}

"Boolean expression to filter rows from the table \"knotes.note\". All fields are combined with a logical 'AND'."
input knotes_note_bool_exp {
    _and: [knotes_note_bool_exp!]
    _not: knotes_note_bool_exp
    _or: [knotes_note_bool_exp!]
    content: String_comparison_exp
    created_at: timestamptz_comparison_exp
    id: Int_comparison_exp
    title: String_comparison_exp
    updated_at: timestamptz_comparison_exp
}

"input type for incrementing numeric columns in table \"knotes.note\""
input knotes_note_inc_input {
    id: Int
}

"input type for inserting data into table \"knotes.note\""
input knotes_note_insert_input {
    content: String
    created_at: timestamptz
    id: Int
    title: String
    updated_at: timestamptz
}

"on_conflict condition type for table \"knotes.note\""
input knotes_note_on_conflict {
    constraint: knotes_note_constraint!
    update_columns: [knotes_note_update_column!]! = []
    where: knotes_note_bool_exp
}

"Ordering options when selecting data from \"knotes.note\"."
input knotes_note_order_by {
    content: order_by
    created_at: order_by
    id: order_by
    title: order_by
    updated_at: order_by
}

"primary key columns input for table: knotes.note"
input knotes_note_pk_columns_input {
    id: Int!
}

"input type for updating data in table \"knotes.note\""
input knotes_note_set_input {
    content: String
    created_at: timestamptz
    id: Int
    title: String
    updated_at: timestamptz
}

"Streaming cursor of the table \"knotes_note\""
input knotes_note_stream_cursor_input {
    "Stream column input with initial value"
    initial_value: knotes_note_stream_cursor_value_input!
    "cursor ordering"
    ordering: cursor_ordering
}

"Initial value of the column from where the streaming should start"
input knotes_note_stream_cursor_value_input {
    content: String
    created_at: timestamptz
    id: Int
    title: String
    updated_at: timestamptz
}

input knotes_note_updates {
    "increments the numeric columns with given value of the filtered values"
    _inc: knotes_note_inc_input
    "sets the columns of the filtered rows to the given values"
    _set: knotes_note_set_input
    "filter the rows which have to be updated"
    where: knotes_note_bool_exp!
}

"Boolean expression to compare columns of type \"timestamptz\". All fields are combined with logical 'AND'."
input timestamptz_comparison_exp {
    _eq: timestamptz
    _gt: timestamptz
    _gte: timestamptz
    _in: [timestamptz!]
    _is_null: Boolean
    _lt: timestamptz
    _lte: timestamptz
    _neq: timestamptz
    _nin: [timestamptz!]
}
